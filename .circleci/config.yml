# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
      - image: circleci/android:api-25-alpha

    environment:
      JVM_OPTS: -Xmx3200m
      GIT_COMMIT_DESC: git log --format=oneline -n 1 $CIRCLE_SHA1

    steps:
      - checkout

      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}

      - run:
          name: Download Project Dependencies
          command: ./gradlew androidDependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}

      - run:
          name: Build App
          command: ./gradlew assembleDebug

      - run:
          name: Run Tests
          command: ./gradlew test

      - store_artifacts:
          path: app/build/reports
          destination: reports

      - store_test_results:
          path: app/build/test-results

      - run:
          name: Move APK To Workspace
          command: |
            mkdir -p workspace/apks
            mv app/build/outputs/apk/app-debug.apk workspace/apks

      - persist_to_workspace:
          root: workspace
          paths:
            - apks/app-debug.apk

  appium:
      docker:
        - image: circleci/python:2.7

      steps:
        - attach_workspace:
            at: /tmp/workspace

        - checkout

        - run:
            name: Install Appium Dependencies
            command: |
              sudo pip install -U selenium

              curl -sL https://deb.nodesource.com/setup_6.x -o nodesource_setup.sh
              sudo bash nodesource_setup.sh
              sudo apt-get install nodejs

              sudo npm install -g appium
              pip install awscli --upgrade --user
              sudo pip install boto3==1.4.4 requests==2.13.0

        - run:
            name: Package Python Appium Tests
            command: ./package_tests.sh

        - run:
            name: Run AWS Device Farm Tests
            command: python aws_device_farm.py


#  upload:_
#      - run:
#          name: Upload to HockeyApp
#          command: 'curl -F "status=2" -F "notify=1" -F "notes=$GIT_COMMIT_DESC" -F "notes_type=0" -F "ipa=@app/build/outputs/apk/app-debug.apk" -H "X-HockeyAppToken:d5632001b8484bebb2310c3e4fcc0042" https://rink.hockeyapp.net/api/2/apps/upload'

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - appium:
          requires:
            - build

